import sympy as sp
import numpy as np
import matplotlib.pyplot as plt
from scipy.fft import fft, fftfreq

# Step 1: Compute zeta(2) symbolically (MNZI's "non-dual" anchor: π²/6 as invariant)
s = sp.symbols('s')
zeta_2 = sp.zeta(2)
print(f"Zeta(2) = {zeta_2}")

# Step 2: Simulate gamma-band oscillation (40 Hz sine + noise, modeling tubulin phonon superposition)
fs = 1000  # Sampling frequency (Hz)
t = np.linspace(0, 1, fs, endpoint=False)  # 1s window
gamma_freq = 40  # Hz (gamma band for OR binding)
signal = np.sin(2 * np.pi * gamma_freq * t) + 0.5 * np.random.randn(len(t))  # Noisy wave

# Step 3: Fourier transform (spectral decomposition: waves → frequencies)
N = len(signal)
yf = fft(signal)
xf = fftfreq(N, 1/fs)[:N//2]  # Positive frequencies

# Step 4: 'Motivic' overlay: partial zeta sum as normalized weights (discrete points deforming spectrum)
n_vals = np.arange(1, 50)  # Finite truncation (evoking convergent series)
partial_zeta = np.sum(1 / n_vals**2)
spectral_weights = 1 / (n_vals**2) / partial_zeta  # Normalized to [0,1]

# Plot: Time domain → Fourier domain, with zeta-scattered points
fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(10, 8))

ax1.plot(t[:100], signal[:100])  # Zoomed first 0.1s for clarity
ax1.set_title('Simulated Gamma-Band Signal (OR Coherence Proxy)')
ax1.set_xlabel('Time (s)')
ax1.set_ylabel('Amplitude')

ax2.plot(xf, 2.0/N * np.abs(yf[:N//2]))  # Magnitude spectrum
ax2.set_title('Fourier Spectrum with Motivic Zeta Weights Overlay')
ax2.set_xlabel('Frequency (Hz)')
ax2.set_ylabel('Magnitude')
ax2.set_xlim(0, 100)  # Focus on low-gamma

# Scatter zeta weights near gamma peak (illustrative deformation: points "folding" waves)
ax2.scatter(gamma_freq + np.arange(len(spectral_weights))*0.5, 
            spectral_weights * max(2.0/N * np.abs(yf[:N//2])), 
            color='red', s=10, label='Zeta Weights (Normalized 1/n²)')
ax2.legend()

plt.tight_layout()
plt.savefig('mnzi_prototype.png')  # Output plot
plt.show()  # If interactive

print(f"Partial zeta sum (n=1 to 49): {partial_zeta}")
